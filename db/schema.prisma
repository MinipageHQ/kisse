// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")

}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "filterJson"]

}

// --------------------------------------

model Organization {
  id          Int     @id @default(autoincrement())
  name        String
  slug        String?
  description String?

  membership  Membership[]
  Document    Document[]
  // domain      Domain[]
  Asset       Asset[]
  Order       Order[]
  Transaction Transaction[]
  Link        Link[]

  profileMedia  Json?
  metadata      Json?
  privateMetada Json?

  defaultDomain    Domain?            @relation(name: "defaultDomainForOrg", fields: [defaultDomainId], references: [id])
  defaultDomainId  Int?
  Domain           Domain[]
  ExternalProfiles ExternalProfiles[]

  platformFeatures PlatformFeatures[]
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN // Not really superadmin but it's for Saltana employees
  CREATOR
  USER // Basically people that bought something, we might only have an e-mail or phone number and nothing else on these people
}

enum PlatformFeatures {
  STRIPE_CONNECT
  GOOGLE_ANALYTICS
  WEBHOOKS
  NOTION_LINKS
  WORKFLOWS
  CRYPTOCURRENCIES
  ASSETS
  ASSETS_SUBSCRIPTIONS
  DONATIONS
  VIDEO_UPLOAD
}

model InviteCode {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usedAt    DateTime?
  name      String?
  referrer  String
  code      String    @unique
  usedBy    User?     @relation(fields: [userId], references: [id])
  userId    Int?
}

model User {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String?
  email          String     @unique
  hashedPassword String?
  role           GlobalRole

  tokens      Token[]
  sessions    Session[]
  memberships Membership[]
  InviteCode  InviteCode[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
enum TokenType {
  RESET_PASSWORD
}

model Link {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  slug           String
  type           TokenType
  target         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  domain         Domain?      @relation(fields: [domainId], references: [id])
  domainId       Int?
}

model Transaction {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  asset           Asset  @relation(fields: [assetId], references: [id])
  assetSnapshot   Json
  assetTypeId     String
  assetType       Json
  status          String
  statusHistory   Json?
  metadata        Json?
  privateMetadata Json?

  cancellationReason String
  ownerId            Int
  takerId            Int
  quantity           Int
  startDate          DateTime
  endDate            DateTime
  duration           Json?
  timeunit           String
  unitPrice          Float
  value              Float
  ownerAmount        Float

  takerAmount    Float
  platformAmount Float
  ownerFees      Float
  takerFees      Float
  currency       Currency
  completedAt    DateTime
  cancelledAt    DateTime

  assetId Int
}

model Order {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization @relation(fields: [organizationId], references: [id])

  organizationId Int


  lines            Json
  moves            Json
  amountDue        Float
  amountPaid       Float
  amountRemaining  Float
  currency         Currency
  payerId          String
  paymentAttempted Int
  metadata         Json?
  platformMetadata Json?
}

enum AssetStatus {
  DRAFT
  ARCHIVED
  LIVE
  SUSPENDED
}

model Asset {
  id Int @id @default(autoincrement())

  name           String
  description    String
  status         AssetStatus // 'draft' | 'active'
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  AssetCategory   AssetCategory? @relation(fields: [assetCategoryId], references: [id])
  assetCategoryId Int?

  AssetType   AssetType @relation(fields: [assetTypeId], references: [id])
  assetTypeId Int


  price    Float
  currency Currency

  metadata Json?

  quantity Int

  Transaction Transaction[]
}

model AssetType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Asset     Asset[]

  timeBased          Boolean
  infiniteStock      Boolean
  name               String
  pricing            Json
  timing             Json    @default("{}")
  unavailableWhen    Json    @default("{}")
  transactionProcess Json    @default("{}")
  isDefault          Boolean @default(false)
  active             Boolean @default(false)

}

model AssetCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  metadata Json?


  Asset Asset[]
}

enum DomainProvider {
  NATIVE
  VERCEL
}

model Domain {
  id             Int            @id @default(autoincrement())
  domain         String
  vercelId       String
  status         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int            @unique
  Link           Link[]
  Organization   Organization[] @relation("defaultDomainForOrg")

  provider           DomainProvider @default(NATIVE)
  vercelDataSnapshot Json           @default("{}")
}

model Document {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

enum Currency {
  USD
  EUR
  TRY
}

enum ExternalProfileService {
  TWITTER
  INSTAGRAM
  GITHUB
  TIKTOK
  MEDIUM
  NOTION
}

model ExternalProfiles {
  id Int @id @default(autoincrement())

  externalId String
  service    ExternalProfileService


  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  verificationLastCheckedAt DateTime
  verificationPassed        String
  verificationEntity        String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}
